#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main() {
pid_t pid = fork();
if (pid < 0) {
perror("Fork failed");
exit(1);
} else if (pid == 0) {
// Child process
execlp("ls", "ls", "-l", (char *)NULL);
perror("Exec failed"); // If exec fails
exit(1);
} else {
// Parent process
wait(NULL); // Wait for child to finish
printf("Child process finished executing 'ls -l'.\n");
}
return 0;
}
 
 
 
cp code
#include <stdio.h>
#include <stdlib.h>
void copy_file(const char *src, const char *dest) {
FILE *src_file, *dest_file;
char ch;
// Open source file in read mode
src_file = fopen(src, "r");
if (src_file == NULL) {
perror("Error opening source file");
exit(EXIT_FAILURE);
}
// Open destination file in write mode
dest_file = fopen(dest, "w");
if (dest_file == NULL) {
perror("Error opening destination file");
fclose(src_file);
exit(EXIT_FAILURE);
}
// Read from source and write to destination
while ((ch = fgetc(src_file)) != EOF) {
fputc(ch, dest_file);
}
printf("File copied successfully.\n");
// Close both files
fclose(src_file);
fclose(dest_file);
}
int main(int argc, char *argv[]) {
if (argc != 3) {
printf("Usage: %s <source_file> <destination_file>\n", argv[0]);
exit(EXIT_FAILURE);
}
copy_file(argv[1], argv[2]);
return 0;
}
 
 
 
ls
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
void list_files(const char *path) {
struct dirent *entry;
DIR *dir = opendir(path);
if (dir == NULL) {
perror("Error opening directory");
exit(EXIT_FAILURE);
}
printf("Files in directory %s:\n", path);
// Read entries from the directory
while ((entry = readdir(dir)) != NULL) {
// Ignore hidden files (starting with '.')
if (entry->d_name[0] != '.') {
printf("%s\n", entry->d_name);
}
}
closedir(dir);
}
int main(int argc, char *argv[]) {
const char *path = "."; // Default to current directory
if (argc > 2) {
printf("Usage: %s [directory_path]\n", argv[0]);
exit(EXIT_FAILURE);
}
if (argc == 2) {
path = argv[1]; // Use provided directory path
}
list_files(path);
return 0;
}
 
 
producer consumer
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int count = 0;
int in = 0;
int out = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t not_empty = PTHREAD_COND_INITIALIZER;
pthread_cond_t not_full = PTHREAD_COND_INITIALIZER;
void *producer(void *arg) {
 for (int i = 0; i < 10; i++) {
 pthread_mutex_lock(&mutex);
 // Wait if buffer is full
 while (count == BUFFER_SIZE) {
 pthread_cond_wait(&not_full, &mutex);
 }
 // Produce an item and add it to the buffer
 buffer[in] = i;
 printf("Producer produced item %d at position %d\n", i, in);
 in = (in + 1) % BUFFER_SIZE;
 count++;
 pthread_cond_signal(&not_empty); // Signal that buffer is not empty
 pthread_mutex_unlock(&mutex);
 sleep(1); // Simulate time taken to produce an item
 }
 return NULL;
}
void *consumer(void *arg) {
 for (int i = 0; i < 10; i++) {
 pthread_mutex_lock(&mutex);
 // Wait if buffer is empty
 while (count == 0) {
 pthread_cond_wait(&not_empty, &mutex);
 }
 // Consume an item from the buffer
 int item = buffer[out];
 printf("Consumer consumed item %d from position %d\n", item, out);
 out = (out + 1) % BUFFER_SIZE;
 count--;
 pthread_cond_signal(&not_full); // Signal that buffer is not full
 pthread_mutex_unlock(&mutex);
 sleep(1); // Simulate time taken to consume an item
 }
 return NULL;
}
int main() {
 pthread_t prod_thread, cons_thread;
 // Create producer and consumer threads
 pthread_create(&prod_thread, NULL, producer, NULL);
 pthread_create(&cons_thread, NULL, consumer, NULL);
 // Wait for both threads to complete
 pthread_join(prod_thread, NULL);
 pthread_join(cons_thread, NULL);
 printf("Producer and Consumer have completed their tasks.\n");
 return 0;
}
 
 
 
 
#include <stdio.h>
struct Process {
 int id;
 int burst_time;
 int arrival_time;
 int waiting_time;
 int turnaround_time;
};
void calculate_fcfs(struct Process processes[], int n) {
 int total_waiting_time = 0, total_turnaround_time = 0;
 processes[0].waiting_time = 0;
 processes[0].turnaround_time = processes[0].burst_time;
 for (int i = 1; i < n; i++) {
 processes[i].waiting_time = processes[i - 1].turnaround_time - processes[i].arrival_time;
 if (processes[i].waiting_time < 0) {
 processes[i].waiting_time = 0;
 }
 processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
 }
 printf("\nFCFS Scheduling:\n");
 printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
 for (int i = 0; i < n; i++) {
 total_waiting_time += processes[i].waiting_time;
 total_turnaround_time += processes[i].turnaround_time;
 printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time,
 processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
 }
 printf("\nAverage Waiting Time (FCFS): %.2f\n", (float)total_waiting_time / n);
 printf("Average Turnaround Time (FCFS): %.2f\n", (float)total_turnaround_time / n);
}
void calculate_sjf(struct Process processes[], int n) {
 int total_waiting_time = 0, total_turnaround_time = 0;
 int completed = 0, current_time = 0;
 int is_completed[n];
 for (int i = 0; i < n; i++) {
 is_completed[i] = 0;
 }
 while (completed < n) {
 int idx = -1;
 int min_burst_time = 1e9;
 for (int i = 0; i < n; i++) {
 if (processes[i].arrival_time <= current_time && is_completed[i] == 0) {
 if (processes[i].burst_time < min_burst_time) {
 min_burst_time = processes[i].burst_time;
 idx = i;
 }
 }
 }
 if (idx != -1) {
 processes[idx].waiting_time = current_time - processes[idx].arrival_time;
 processes[idx].turnaround_time = processes[idx].waiting_time + processes[idx].burst_time;
 current_time += processes[idx].burst_time;
 is_completed[idx] = 1;
 completed++;
 } else {
 current_time++;
 }
 }
 printf("\nSJF Scheduling:\n");
 printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
 for (int i = 0; i < n; i++) {
 total_waiting_time += processes[i].waiting_time;
 total_turnaround_time += processes[i].turnaround_time;
 printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time,
 processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
 }
 printf("\nAverage Waiting Time (SJF): %.2f\n", (float)total_waiting_time / n);
 printf("Average Turnaround Time (SJF): %.2f\n", (float)total_turnaround_time / n);
}
int main() {
 int n;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 struct Process processes[n];
 for (int i = 0; i < n; i++) {
 processes[i].id = i + 1;
 printf("Enter burst time and arrival time for Process P%d: ", i + 1);
 scanf("%d %d", &processes[i].burst_time, &processes[i].arrival_time);
 }
 calculate_fcfs(processes, n);
 calculate_sjf(processes, n);
 return 0;
}
 
 
 
 
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
// Define semaphores and shared variables
sem_t rw_mutex; // Controls access to the shared resource
sem_t mutex; // Protects the read_count variable
int read_count = 0; // Number of active readers
int shared_data = 0; // The shared resource
// Reader function
void *reader(void *arg) {
 int reader_id = *((int *)arg); // Get reader ID for identification
 // Entry Section (Critical Section for read_count)
 sem_wait(&mutex); // Lock the mutex to safely update read_count
 read_count++;
 if (read_count == 1) {
 // If this is the first reader, lock rw_mutex to block writers
 sem_wait(&rw_mutex);
 }
 sem_post(&mutex); // Unlock the mutex after updating read_count
 // Critical Section (Reading the shared resource)
 printf("Reader %d: Reading shared data = %d\n", reader_id, shared_data);
 sleep(1); // Simulate reading time
 // Exit Section (Critical Section for read_count)
 sem_wait(&mutex); // Lock the mutex to safely update read_count
 read_count--;
 if (read_count == 0) {
 // If this is the last reader, unlock rw_mutex to allow writers
 sem_post(&rw_mutex);
 }
 sem_post(&mutex); // Unlock the mutex after updating read_count
 pthread_exit(0); // Exit the thread
}
// Writer function
void *writer(void *arg) {
 int writer_id = *((int *)arg); // Get writer ID for identification
 // Entry Section (Critical Section for shared resource)
 sem_wait(&rw_mutex); // Lock rw_mutex to get exclusive access
 // Critical Section (Writing to the shared resource)
 shared_data++; // Simulate writing by modifying shared_data
 printf("Writer %d: Writing shared data = %d\n", writer_id, shared_data);
 sleep(1); // Simulate writing time
 // Exit Section
 sem_post(&rw_mutex); // Unlock rw_mutex after writing
 pthread_exit(0); // Exit the thread
}
int main() {
 pthread_t readers[5], writers[3]; // Declare threads for readers and writers
 int reader_ids[5] = {1, 2, 3, 4, 5}; // IDs for readers
 int writer_ids[3] = {1, 2, 3}; // IDs for writers
 // Initialize semaphores
 sem_init(&rw_mutex, 0, 1); // rw_mutex initialized to 1 (available)
 sem_init(&mutex, 0, 1); // mutex initialized to 1 (available)
 // Create reader threads
 for (int i = 0; i < 5; i++) {
 pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
 }
 // Create writer threads
 for (int i = 0; i < 3; i++) {
 pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
 }
 // Wait for all reader threads to finish
 for (int i = 0; i < 5; i++) {
 pthread_join(readers[i], NULL);
 }
 // Wait for all writer threads to finish
 for (int i = 0; i < 3; i++) {
 pthread_join(writers[i], NULL);
 }
 // Destroy semaphores
 sem_destroy(&rw_mutex);
 sem_destroy(&mutex);
 return 0;
}